{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, CLEAR_DATA, USERS_LIKES_STATE_CHANGE } from \"../constants/index\";\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport 'firebase/compat/firestore';\nexport function clearData() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAR_DATA\n    });\n  };\n}\nexport function fetchUser() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"users\").doc(firebase.auth().currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"posts\").doc(firebase.auth().currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread({\n          id: id\n        }, data);\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    firebase.firestore().collection(\"following\").doc(firebase.auth().currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i], true));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid, getPosts) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n\n    if (!found) {\n      firebase.firestore().collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var user = snapshot.data();\n          user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: user\n          });\n        } else {\n          console.log('does not exist');\n        }\n      });\n\n      if (getPosts) {\n        dispatch(fetchUsersFollowingPosts(uid));\n      }\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var uid = snapshot.docs[0].ref.path.split('/')[1];\n      console.log({\n        snapshot: snapshot,\n        uid: uid\n      });\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n\n      for (var i = 0; i < posts.length; i++) {\n        dispatch(fetchUsersFollowingLikes(uid, posts[i].id));\n      }\n\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n    });\n  };\n}\nexport function fetchUsersFollowingLikes(uid, postId) {\n  return function (dispatch, getState) {\n    firebase.firestore().collection(\"posts\").doc(uid).collection(\"userPosts\").doc(postId).collection(\"likes\").doc(firebase.auth().currentUser.uid).onSnapshot(function (snapshot) {\n      var postId = snapshot.ZE.path.segments[3];\n      var currentUserLike = false;\n\n      if (snapshot.exists) {\n        currentUserLike = true;\n      }\n\n      dispatch({\n        type: USERS_LIKES_STATE_CHANGE,\n        postId: postId,\n        currentUserLike: currentUserLike\n      });\n    });\n  };\n}","map":{"version":3,"names":["USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","CLEAR_DATA","USERS_LIKES_STATE_CHANGE","firebase","clearData","dispatch","type","fetchUser","firestore","collection","doc","auth","currentUser","uid","get","then","snapshot","exists","data","console","log","fetchUserPosts","orderBy","posts","docs","map","id","fetchUserFollowing","onSnapshot","following","i","length","fetchUsersData","getPosts","getState","found","usersState","users","some","el","user","fetchUsersFollowingPosts","ref","path","split","find","fetchUsersFollowingLikes","postId","ZE","segments","currentUserLike"],"sources":["/Users/spring/Documents/GitHub/flash/redux/actions/index.js"],"sourcesContent":["import { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE, CLEAR_DATA, USERS_LIKES_STATE_CHANGE } from '../constants/index'\n\nimport firebase from 'firebase/compat/app'\nimport 'firebase/compat/auth'\nimport 'firebase/compat/firestore'\n\nexport function clearData() {\n    return ((dispatch) => {\n        dispatch({type: CLEAR_DATA})\n    })\n}\n\nexport function fetchUser() {\n    return((dispatch) => {\n        firebase.firestore()\n            .collection(\"users\")\n            .doc(firebase.auth().currentUser.uid)\n            .get()\n            .then((snapshot) => {\n                if (snapshot.exists) {\n                    dispatch({type: USER_STATE_CHANGE, currentUser: snapshot.data()})\n                } else {\n                    console.log('does not exist')\n                }\n            })\n    })\n}\n\nexport function fetchUserPosts() {\n    return((dispatch) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data }\n                })\n                dispatch({ type: USER_POSTS_STATE_CHANGE, posts })\n            })\n    })\n}\n\nexport function fetchUserFollowing() {\n    return((dispatch) => {\n        firebase.firestore()\n            .collection(\"following\")\n            .doc(firebase.auth().currentUser.uid)\n            .collection(\"userFollowing\")\n            .onSnapshot((snapshot) => {\n                let following = snapshot.docs.map(doc => {         \n                    const id = doc.id;\n                    return id\n                })\n                dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following })\n                for (let i = 0; i < following.length; i++) {\n                    dispatch(fetchUsersData(following[i], true))\n                }\n            })\n    })\n}\n\nexport function fetchUsersData(uid, getPosts) {\n    return((dispatch, getState) => {\n        const found = getState().usersState.users.some(el => el.uid === uid)\n        \n        if (!found) {\n            firebase.firestore()\n            .collection(\"users\")\n            .doc(uid)\n            .get()\n            .then((snapshot) => {\n                if (snapshot.exists) {\n                    let user = snapshot.data()\n                    user.uid = snapshot.id\n\n                    dispatch({ type: USERS_DATA_STATE_CHANGE, user })\n                } else {\n                    console.log('does not exist')\n                }\n            })\n            if(getPosts) {\n                dispatch(fetchUsersFollowingPosts(uid));\n            }\n        }\n    }) \n}\n\nexport function fetchUsersFollowingPosts(uid) {\n    return((dispatch, getState) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .orderBy(\"creation\", \"asc\")\n            .get()\n            .then((snapshot) => {\n                \n                // const uid = snapshot.query.EP.path.segments[1]\n                const uid = snapshot.docs[0].ref.path.split('/')[1]\n\n                console.log({snapshot, uid})\n                const user = getState().usersState.users.find(el => el.uid === uid)\n\n                let posts = snapshot.docs.map(doc => {\n                    const data = doc.data();\n                    const id = doc.id;\n                    return { id, ...data, user }\n                })\n\n                for(let i = 0; i < posts.length; i++) {\n                    dispatch(fetchUsersFollowingLikes(uid, posts[i].id))\n                }\n                dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid })\n            })\n    })\n}\n\nexport function fetchUsersFollowingLikes(uid, postId) {\n    return((dispatch, getState) => {\n        firebase.firestore()\n            .collection(\"posts\")\n            .doc(uid)\n            .collection(\"userPosts\")\n            .doc(postId)\n            .collection(\"likes\")\n            .doc(firebase.auth().currentUser.uid)\n            .onSnapshot((snapshot) => {\n                const postId = snapshot.ZE.path.segments[3];\n\n                let currentUserLike = false;\n                if (snapshot.exists) {\n                    currentUserLike = true;\n                }\n\n                dispatch({ type: USERS_LIKES_STATE_CHANGE, postId, currentUserLike })\n            })\n    })\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}